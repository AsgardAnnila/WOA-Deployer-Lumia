<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="WindowsDeployedSuccessfully" xml:space="preserve">
    <value>Done!
Now, please, **eject the Phone safely** to avoid data corruption issues and reboot your Phone.
After reboot, choose "Windows 10" in the Boot Menu to start the Windows 10 ARM Setup.
Enjoy!</value>
  </data>
  <data name="WarningNotice" xml:space="preserve">
    <value>- This tool comes with no warranty. 
- The authors can't be hold responsible for any damage it may cause to your device.    
- This tool intended for usage with Lumia 950 and 950 XL **ONLY**.
    
By clicking "OK" you accept the aforementioned risks.</value>
  </data>
  <data name="DriversInjectedSucessfully" xml:space="preserve">
    <value>The drivers have been injected correctly</value>
  </data>
  <data name="TermsOfUseTitle" xml:space="preserve">
    <value>Disclaimer Notice and Terms of Use</value>
  </data>
  <data name="NoPostOobeDrivers" xml:space="preserve">
    <value>Sorry, there are no post-OOBE drivers available to inject.
The Core Package that is currently installed doesn't have an additional post-OOBE driver set.</value>
  </data>
  <data name="CannotInjectPostOobe" xml:space="preserve">
    <value>Cannot inject the Post-OOBE drivers</value>
  </data>
  <data name="Finished" xml:space="preserve">
    <value>Finished</value>
  </data>
  <data name="WimFileNoValidArchitecture" xml:space="preserve">
    <value>The selected .WIM file doesn't contain any image for ARM64. Please, select a .wim file that targets this architecture.</value>
  </data>
  <data name="InstallGpuManualSteps" xml:space="preserve">
    <value># Final steps

In order to finish the installation, you need to perform these steps manually.

* Reboot into Windows 10.
* Go to the **Device Manager**
* Under **Unknown Devices**, look for for one described as **'ACPI\MSHW1004\0
'** 
  * **[Tip]** open each one by double clicking on them and look into the **Details** tab for this identifier. It should be one of the first 10 elements of the list.
  * Once you find it choose to *Update* it. 
  * In the driver update wizard, select "Choose driver from PC". 
  * Select **'Browse**'.  
  * Navigate to **'C:\Users\Public\OEMPanel'** and accept the driver. The driver should be found. After that, a *red warning dialog window* should appear because the driver is not signed. **Confirm** that you want to install it.
* After the driver has been installed, your screen will become black for a while and it will automatically turn on again
* Congratulations! You already have accelerated graphics!!

# Known problems
  After installting the driver, the phone **may crash, hang or reboot**. If it's unresponsive for around 1 minute, just force a soft reset by holding the [Power] button for 10 seconds.
  Next time you boot your phone will have GPU installed ;)


# WARNING
Don't disable Dual Boot after installing the GPU drivers or the phone **will NOT boot** and you will have to flash the stock FFU.</value>
  </data>
  <data name="ManualStepsTitle" xml:space="preserve">
    <value>Manual steps</value>
  </data>
  <data name="PhoneIsNotLumia950XL" xml:space="preserve">
    <value>The phone is not a Lumia 950 XL</value>
  </data>
</root>